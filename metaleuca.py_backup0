#!/usr/bin/python

import re
import sys
import xmlrpclib


def connect_to_cobbler(server, username, password):
    """
    Make the connection to the cobbler server that will be used for the
    all operations on the system. This will keep from having to make a 
    connection everytime we perform an operation on the server and should
    keep a (possible) huge connection load on the cobbler server

    server -- The IP or FQDN of the cobbler server
    username -- Username with admin rights on the cobbler server
    password -- Password of the corresponding username above
    """

    remote = xmlrpclib.Server("http://" + server + "/cobbler_api")
    token = remote.login(username, password)

    return remote, token


def display_distros(server):
	for x in server.get_distros():
		name = x['name']
		os_version = x['os_version']
		kernel = x['kernel']
		initrd = x['initrd']
		print "NAME: " + name + " OS_VERSION: " + os_version + " KERNEL: " + kernel + " INITRD: " + initrd


def display_profiles(server):
	for x in server.get_profiles():
		name = x['name']
		kickstart = x['kickstart']
		distro = x['distro']
		print "NAME: " + name + " DISTRO: " + distro + " KICKSTART: " + kickstart


def display_systems(server):
	for x in server.get_systems():
		name = x['name']
		hostname = x['hostname']
		profile = x['profile']
		status = x['status']
		netboot_enabled = x['netboot_enabled']
		for device in x['interfaces']:
			if device == "eth0" or device == "em1":
				ip = x['interfaces'][device]['ip_address']
				mac = x['interfaces'][device]['mac_address']
		if re.match(r"^r2-", hostname): 
			print "IP: " + ip + " MAC: " + mac + " NAME: " + name + " HOSTNAME: " + hostname + " PROFILE: " + profile + " STATUS: " + status + " NETBOOT_ENABLED: " + str(netboot_enabled)


def display_system_found_by_name(server, targetname):
	for x in server.get_systems():
		name = x['name']
		if re.match(name, targetname): 
			hostname = x['hostname']
			profile = x['profile']
			status = x['status']
			netboot_enabled = x['netboot_enabled']
			for device in x['interfaces']:
				if device == "eth0" or device == "em1":
					ip = x['interfaces'][device]['ip_address']
					mac = x['interfaces'][device]['mac_address']
			print "IP: " + ip + " MAC: " + mac + " NAME: " + name + " HOSTNAME: " + hostname + " PROFILE: " + profile + " STATUS: " + status + " NETBOOT_ENABLED: " + str(netboot_enabled)

	
def change_system_found_by_name_modify_its_profile(server, token, name, profile):
	print "MODIFY SYSTEM'S PROFILE"
	print "Name: " + name + " profile: " + profile 
	handle = server.get_system_handle(name,token)
	server.modify_system(handle, "profile", profile, token)
	display_system_found_by_name(server, name)


def change_system_found_by_name_set_its_netboot_enabled(server, token, name, flag):
	print "MODIFY SYSTEM'S NETBOOT_ENABLED"
	print "name: " + name + " netboot_enabled: " + flag 
	handle = server.get_system_handle(name,token)
	server.modify_system(handle, "netboot_enabled", flag, token)
	display_system_found_by_name(server, name)


def main():

	COBBLER_SERVER = "192.168.62.1"
	USER = "cobbler"
	PASSWORD = "cobbler"

	server, token = connect_to_cobbler(COBBLER_SERVER, USER, PASSWORD)
	print

	if len(sys.argv) > 1 and sys.argv[1] == "--list-all":
		print "DISPLAY DISTROS"
		display_distros(server)
		print

		print "DISPLAY PROFILES"
		display_profiles(server)
		print

	print "DISPLAY SYSTEMS"
	display_systems(server)
	print

	change_system_found_by_name_modify_its_profile(server, token, "r2-25", "es-ubuntu12_04-x86_64")
	print

	change_system_found_by_name_set_its_netboot_enabled(server, token, "r2-25", "True")
	print

	change_system_found_by_name_set_its_netboot_enabled(server, token, "r2-25", "False")
	print


if __name__ == "__main__":
    main()
    exit

